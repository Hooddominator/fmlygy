"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Time = (function () {
  _createClass(Time, null, [{
    key: "fromSeconds",
    value: function fromSeconds(seconds) {
      var remaining = seconds;
      var hours = Math.floor(remaining / 3600);
      remaining = remaining - hours * 3600;
      var minutes = Math.floor(remaining / 60);
      remaining = remaining - minutes * 60;
      var secs = Math.floor(remaining);
      remaining = remaining - secs;
      var milli = remaining * 1000;
      return new Time(hours, minutes, secs, milli);
    }
  }]);

  function Time(hour, minute, second, milli) {
    _classCallCheck(this, Time);

    this._hour = parseInt(hour, 10);
    this._minute = parseInt(minute, 10);
    this._second = parseInt(second, 10);
    this._milli = parseInt(milli, 10);
  }

  _createClass(Time, [{
    key: "getHour",
    value: function getHour() {
      return this._hour;
    }
  }, {
    key: "getMilli",
    value: function getMilli() {
      return this._milli;
    }
  }, {
    key: "getMinute",
    value: function getMinute() {
      return this._minute;
    }
  }, {
    key: "getSecond",
    value: function getSecond() {
      return this._second;
    }
  }, {
    key: "toSeconds",
    value: function toSeconds() {
      return this.getHour() * 3600 + this.getMinute() * 60 + this.getSecond() + this.getMilli() / 1000;
    }
  }, {
    key: "toSRTString",
    value: function toSRTString() {
      var hourString = ("0" + this.getHour().toString()).slice(-2);
      var minString = ("0" + this.getMinute().toString()).slice(-2);
      var secString = ("0" + this.getSecond().toString()).slice(-2);
      var milliString = (this.getMilli().toString() + "00").slice(0, 3);
      return hourString + ":" + minString + ":" + secString + "," + milliString;
    }
  }]);

  return Time;
})();

exports["default"] = Time;
module.exports = exports["default"];